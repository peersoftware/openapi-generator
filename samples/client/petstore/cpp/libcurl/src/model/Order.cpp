/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppLibcurlOpenAPIClient/model/Order.h"

namespace org::openapitools::client::model {



nlohmann::json Order::toJson() const {
    nlohmann::json val = nlohmann::json::object();
    
    if (m_IdIsSet) {
        val["id"] = ModelBase::toJson(m_Id);
    }
    if (m_PetIdIsSet) {
        val["petId"] = ModelBase::toJson(m_PetId);
    }
    if (m_QuantityIsSet) {
        val["quantity"] = ModelBase::toJson(m_Quantity);
    }
    if (m_ShipDateIsSet) {
        val["shipDate"] = ModelBase::toJson(m_ShipDate);
    }
    if (m_StatusIsSet) {
        val["status"] = ModelBase::toJson(m_Status);
    }
    if (m_CompleteIsSet) {
        val["complete"] = ModelBase::toJson(m_Complete);
    }

    return val;
}

bool Order::fromJson(const nlohmann::json& val) {
    bool ok = true;
    
    if (val.contains("id")) {
        const nlohmann::json& fieldValue = val.at("id");
        if (!fieldValue.is_null()) {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if (val.contains("petId")) {
        const nlohmann::json& fieldValue = val.at("petId");
        if (!fieldValue.is_null()) {
            int64_t refVal_setPetId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPetId);
            setPetId(refVal_setPetId);
        }
    }
    if (val.contains("quantity")) {
        const nlohmann::json& fieldValue = val.at("quantity");
        if (!fieldValue.is_null()) {
            int32_t refVal_setQuantity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuantity);
            setQuantity(refVal_setQuantity);
        }
    }
    if (val.contains("shipDate")) {
        const nlohmann::json& fieldValue = val.at("shipDate");
        if (!fieldValue.is_null()) {
            std::string refVal_setShipDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShipDate);
            setShipDate(refVal_setShipDate);
        }
    }
    if (val.contains("status")) {
        const nlohmann::json& fieldValue = val.at("status");
        if (!fieldValue.is_null()) {
            std::string refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if (val.contains("complete")) {
        const nlohmann::json& fieldValue = val.at("complete");
        if (!fieldValue.is_null()) {
            bool refVal_setComplete;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComplete);
            setComplete(refVal_setComplete);
        }
    }
    return ok;
}

int64_t Order::getId() const {
    return m_Id;
}

void Order::setId(int64_t value) {
    m_Id = value;
    m_IdIsSet = true;
}

bool Order::idIsSet() const {
    return m_IdIsSet;
}

void Order::unsetId() {
    m_IdIsSet = false;
}
int64_t Order::getPetId() const {
    return m_PetId;
}

void Order::setPetId(int64_t value) {
    m_PetId = value;
    m_PetIdIsSet = true;
}

bool Order::petIdIsSet() const {
    return m_PetIdIsSet;
}

void Order::unsetPetId() {
    m_PetIdIsSet = false;
}
int32_t Order::getQuantity() const {
    return m_Quantity;
}

void Order::setQuantity(int32_t value) {
    m_Quantity = value;
    m_QuantityIsSet = true;
}

bool Order::quantityIsSet() const {
    return m_QuantityIsSet;
}

void Order::unsetQuantity() {
    m_QuantityIsSet = false;
}
const std::string& Order::getShipDate() const {
    return m_ShipDate;
}

void Order::setShipDate(std::string_view value) {
    m_ShipDate = value;
    m_ShipDateIsSet = true;
}

bool Order::shipDateIsSet() const {
    return m_ShipDateIsSet;
}

void Order::unsetShipDate() {
    m_ShipDateIsSet = false;
}
const std::string& Order::getStatus() const {
    return m_Status;
}

void Order::setStatus(std::string_view value) {
    m_Status = value;
    m_StatusIsSet = true;
}

bool Order::statusIsSet() const {
    return m_StatusIsSet;
}

void Order::unsetStatus() {
    m_StatusIsSet = false;
}
bool Order::isComplete() const {
    return m_Complete;
}

void Order::setComplete(bool value) {
    m_Complete = value;
    m_CompleteIsSet = true;
}

bool Order::completeIsSet() const {
    return m_CompleteIsSet;
}

void Order::unsetComplete() {
    m_CompleteIsSet = false;
}
}


