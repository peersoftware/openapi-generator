/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "CppLibcurlOpenAPIClient/model/Pet.h"

namespace org::openapitools::client::model {



nlohmann::json Pet::toJson() const {
    nlohmann::json val = nlohmann::json::object();
    
    if (m_IdIsSet) {
        val["id"] = ModelBase::toJson(m_Id);
    }
    if (m_CategoryIsSet) {
        val["category"] = ModelBase::toJson(m_Category);
    }
    if (m_NameIsSet) {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if (m_PhotoUrlsIsSet) {
        val["photoUrls"] = ModelBase::toJson(m_PhotoUrls);
    }
    if (m_TagsIsSet) {
        val["tags"] = ModelBase::toJson(m_Tags);
    }
    if (m_StatusIsSet) {
        val["status"] = ModelBase::toJson(m_Status);
    }

    return val;
}

bool Pet::fromJson(const nlohmann::json& val) {
    bool ok = true;
    
    if (val.contains("id")) {
        const nlohmann::json& fieldValue = val.at("id");
        if (!fieldValue.is_null()) {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if (val.contains("category")) {
        const nlohmann::json& fieldValue = val.at("category");
        if (!fieldValue.is_null()) {
            std::shared_ptr<Category> refVal_setCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategory);
            setCategory(refVal_setCategory);
        }
    }
    if (val.contains("name")) {
        const nlohmann::json& fieldValue = val.at("name");
        if (!fieldValue.is_null()) {
            std::string refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if (val.contains("photoUrls")) {
        const nlohmann::json& fieldValue = val.at("photoUrls");
        if (!fieldValue.is_null()) {
            std::vector<std::string> refVal_setPhotoUrls;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhotoUrls);
            setPhotoUrls(refVal_setPhotoUrls);
        }
    }
    if (val.contains("tags")) {
        const nlohmann::json& fieldValue = val.at("tags");
        if (!fieldValue.is_null()) {
            std::vector<std::shared_ptr<Tag>> refVal_setTags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTags);
            setTags(refVal_setTags);
        }
    }
    if (val.contains("status")) {
        const nlohmann::json& fieldValue = val.at("status");
        if (!fieldValue.is_null()) {
            std::string refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    return ok;
}

int64_t Pet::getId() const {
    return m_Id;
}

void Pet::setId(int64_t value) {
    m_Id = value;
    m_IdIsSet = true;
}

bool Pet::idIsSet() const {
    return m_IdIsSet;
}

void Pet::unsetId() {
    m_IdIsSet = false;
}
const std::shared_ptr<Category>& Pet::getCategory() const {
    return m_Category;
}

void Pet::setCategory(const std::shared_ptr<Category>& value) {
    m_Category = value;
    m_CategoryIsSet = true;
}

bool Pet::categoryIsSet() const {
    return m_CategoryIsSet;
}

void Pet::unsetCategory() {
    m_CategoryIsSet = false;
}
const std::string& Pet::getName() const {
    return m_Name;
}

void Pet::setName(std::string_view value) {
    m_Name = value;
    m_NameIsSet = true;
}

bool Pet::nameIsSet() const {
    return m_NameIsSet;
}

void Pet::unsetName() {
    m_NameIsSet = false;
}
const std::vector<std::string>& Pet::getPhotoUrls() const {
    return m_PhotoUrls;
}

void Pet::setPhotoUrls(const std::vector<std::string>& value) {
    m_PhotoUrls = value;
    m_PhotoUrlsIsSet = true;
}

bool Pet::photoUrlsIsSet() const {
    return m_PhotoUrlsIsSet;
}

void Pet::unsetPhotoUrls() {
    m_PhotoUrlsIsSet = false;
}
const std::vector<std::shared_ptr<Tag>>& Pet::getTags() const {
    return m_Tags;
}

void Pet::setTags(const std::vector<std::shared_ptr<Tag>>& value) {
    m_Tags = value;
    m_TagsIsSet = true;
}

bool Pet::tagsIsSet() const {
    return m_TagsIsSet;
}

void Pet::unsetTags() {
    m_TagsIsSet = false;
}
const std::string& Pet::getStatus() const {
    return m_Status;
}

void Pet::setStatus(std::string_view value) {
    m_Status = value;
    m_StatusIsSet = true;
}

bool Pet::statusIsSet() const {
    return m_StatusIsSet;
}

void Pet::unsetStatus() {
    m_StatusIsSet = false;
}
}


