/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "CppLibcurlOpenAPIClient/api/StoreApi.h"

#include <optional>
#include <stdexcept>
#include <unordered_set>
#include <utility>

#include "CppLibcurlOpenAPIClient/Utility.h"

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;
using org::openapitools::client::api::replaceAll;

StoreApi::StoreApi(const std::shared_ptr<const ApiClient> &apiClient)
    : m_ApiClient(apiClient) {
}

ApiResponse
StoreApi::deleteOrder(
    std::string orderId
) const {


    std::string localVarPath = "/store/order/{orderId}";
    replaceAll(localVarPath, "{orderId}", ApiClient::parameterToString(orderId));

    std::map<std::string, std::string> localVarQueryParams;
    std::map<std::string, std::string> localVarHeaderParams;
    std::map<std::string, std::string> localVarFormParams;

    std::unordered_set<std::string> localVarResponseHttpContentTypes;

    std::string localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType = "application/json";
    } else if (localVarResponseHttpContentTypes.find("application/json") !=
            localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType = "application/json";
    }
    else {
        throw std::invalid_argument("StoreApi->deleteOrder does not produce any supported media type");
    }

    localVarHeaderParams["Accept"] = localVarResponseHttpContentType;

    std::unordered_set<std::string> localVarConsumeHttpContentTypes;


    std::string localVarRequestHttpContentType;
    std::string localVarHttpBody;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
            localVarConsumeHttpContentTypes.find("application/json") != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType = "application/json";
    } else if (localVarConsumeHttpContentTypes.find("application/x-www-form-urlencoded") != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType = "application/x-www-form-urlencoded";
    } else {
        throw std::invalid_argument("StoreApi->deleteOrder does not consume any supported media type");
    }

    auto response = m_ApiClient->callApi(
        localVarPath, "DELETE", localVarQueryParams, localVarHeaderParams,
        localVarFormParams, localVarRequestHttpContentType, localVarHttpBody);

    return response;
}
std::pair<ApiResponse, std::map<std::string, int32_t>>
StoreApi::getInventory(
) const {


    std::string localVarPath = "/store/inventory";
    
    std::map<std::string, std::string> localVarQueryParams;
    std::map<std::string, std::string> localVarHeaderParams;
    std::map<std::string, std::string> localVarFormParams;

    std::unordered_set<std::string> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert("application/json");

    std::string localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType = "application/json";
    } else if (localVarResponseHttpContentTypes.find("application/json") !=
            localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType = "application/json";
    }
    else {
        throw std::invalid_argument("StoreApi->getInventory does not produce any supported media type");
    }

    localVarHeaderParams["Accept"] = localVarResponseHttpContentType;

    std::unordered_set<std::string> localVarConsumeHttpContentTypes;


    std::string localVarRequestHttpContentType;
    std::string localVarHttpBody;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
            localVarConsumeHttpContentTypes.find("application/json") != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType = "application/json";
    } else if (localVarConsumeHttpContentTypes.find("application/x-www-form-urlencoded") != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType = "application/x-www-form-urlencoded";
    } else {
        throw std::invalid_argument("StoreApi->getInventory does not consume any supported media type");
    }

    auto response = m_ApiClient->callApi(
        localVarPath, "GET", localVarQueryParams, localVarHeaderParams,
        localVarFormParams, localVarRequestHttpContentType, localVarHttpBody);


    if (response.getError().isError() || response.isHttpError()) {
        return std::make_pair(response, std::map<std::string, int32_t>());
    }

    std::map<std::string, int32_t> localVarResult;

    if (localVarResponseHttpContentType == "application/json") {
        auto localVarJson = nlohmann::json::parse(response.getData());

        ModelBase::fromJson(localVarJson, localVarResult);
    }

    return std::make_pair(response, localVarResult);
}
std::pair<ApiResponse, std::shared_ptr<Order>>
StoreApi::getOrderById(
    int64_t orderId
) const {


    std::string localVarPath = "/store/order/{orderId}";
    replaceAll(localVarPath, "{orderId}", ApiClient::parameterToString(orderId));

    std::map<std::string, std::string> localVarQueryParams;
    std::map<std::string, std::string> localVarHeaderParams;
    std::map<std::string, std::string> localVarFormParams;

    std::unordered_set<std::string> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert("application/xml");
    localVarResponseHttpContentTypes.insert("application/json");

    std::string localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType = "application/json";
    } else if (localVarResponseHttpContentTypes.find("application/json") !=
            localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType = "application/json";
    }
    else {
        throw std::invalid_argument("StoreApi->getOrderById does not produce any supported media type");
    }

    localVarHeaderParams["Accept"] = localVarResponseHttpContentType;

    std::unordered_set<std::string> localVarConsumeHttpContentTypes;


    std::string localVarRequestHttpContentType;
    std::string localVarHttpBody;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
            localVarConsumeHttpContentTypes.find("application/json") != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType = "application/json";
    } else if (localVarConsumeHttpContentTypes.find("application/x-www-form-urlencoded") != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType = "application/x-www-form-urlencoded";
    } else {
        throw std::invalid_argument("StoreApi->getOrderById does not consume any supported media type");
    }

    auto response = m_ApiClient->callApi(
        localVarPath, "GET", localVarQueryParams, localVarHeaderParams,
        localVarFormParams, localVarRequestHttpContentType, localVarHttpBody);


    if (response.getError().isError() || response.isHttpError()) {
        return std::make_pair(response, std::shared_ptr<Order>());
    }

    std::shared_ptr<Order> localVarResult(std::make_shared<Order>());

    if (localVarResponseHttpContentType == "application/json") {
        auto localVarJson = nlohmann::json::parse(response.getData());

        ModelBase::fromJson(localVarJson, localVarResult);
    }

    return std::make_pair(response, localVarResult);
}
std::pair<ApiResponse, std::shared_ptr<Order>>
StoreApi::placeOrder(
    const std::shared_ptr<Order>& order
) const {

    // verify the required parameter 'order' is set
    if (order == nullptr) {
        throw std::invalid_argument("Missing required parameter 'order' when calling StoreApi->placeOrder");
    }


    std::string localVarPath = "/store/order";
    
    std::map<std::string, std::string> localVarQueryParams;
    std::map<std::string, std::string> localVarHeaderParams;
    std::map<std::string, std::string> localVarFormParams;

    std::unordered_set<std::string> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert("application/xml");
    localVarResponseHttpContentTypes.insert("application/json");

    std::string localVarResponseHttpContentType;

    // use JSON if possible
    if (localVarResponseHttpContentTypes.size() == 0) {
        localVarResponseHttpContentType = "application/json";
    } else if (localVarResponseHttpContentTypes.find("application/json") !=
            localVarResponseHttpContentTypes.end()) {
        localVarResponseHttpContentType = "application/json";
    }
    else {
        throw std::invalid_argument("StoreApi->placeOrder does not produce any supported media type");
    }

    localVarHeaderParams["Accept"] = localVarResponseHttpContentType;

    std::unordered_set<std::string> localVarConsumeHttpContentTypes;
    localVarConsumeHttpContentTypes.insert("application/json");


    std::string localVarRequestHttpContentType;
    std::string localVarHttpBody;

    // use JSON if possible
    if (localVarConsumeHttpContentTypes.size() == 0 ||
            localVarConsumeHttpContentTypes.find("application/json") != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType = "application/json";
        nlohmann::json localVarJson;

        localVarJson = ModelBase::toJson(order);
        
        localVarHttpBody = localVarJson.get<std::string>();
    } else if (localVarConsumeHttpContentTypes.find("application/x-www-form-urlencoded") != localVarConsumeHttpContentTypes.end()) {
        localVarRequestHttpContentType = "application/x-www-form-urlencoded";
    } else {
        throw std::invalid_argument("StoreApi->placeOrder does not consume any supported media type");
    }

    auto response = m_ApiClient->callApi(
        localVarPath, "POST", localVarQueryParams, localVarHeaderParams,
        localVarFormParams, localVarRequestHttpContentType, localVarHttpBody);


    if (response.getError().isError() || response.isHttpError()) {
        return std::make_pair(response, std::shared_ptr<Order>());
    }

    std::shared_ptr<Order> localVarResult(std::make_shared<Order>());

    if (localVarResponseHttpContentType == "application/json") {
        auto localVarJson = nlohmann::json::parse(response.getData());

        ModelBase::fromJson(localVarJson, localVarResult);
    }

    return std::make_pair(response, localVarResult);
}

}
}
}
}

