/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppLibcurlOpenAPIClient/ApiResponse.h"

#include <string>
#include <utility>

namespace org::openapitools::client::api {

bool ErrorResponse::isError() const {
    return m_code != 0;
}

long ErrorResponse::getCode() const {
    return m_code;
}

void ErrorResponse::setCode(long code) {
    m_code = code;
}

const std::string &ErrorResponse::getMessage() const {
    return m_message;
}

void ErrorResponse::setMessage(std::string &&message) {
    m_message = std::move(message);
}

const ErrorResponse &ApiResponse::getError() const {
    return m_error;
}

void ApiResponse::setError(long code, std::string &&message) {
    m_error.setCode(code);
    m_error.setMessage(std::move(message));
}

long ApiResponse::getHttpStatus() const {
    return m_status;
}

void ApiResponse::setHttpStatus(long status) {
    m_status = status;
}

bool ApiResponse::isHttpError() const {
    // 1xx - informational : OK
    // 2xx - successful    : OK
    // 3xx - redirection   : OK
    // 4xx - client error  : not OK
    // 5xx - server error  : not OK
    return m_status >= 400;
}

const std::string &ApiResponse::getData() const {
    return m_data;
}

void ApiResponse::setData(std::string &&data) {
    m_data = std::move(data);
}

}
