#
# OpenAPI Petstore
# This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
#
# The version of the OpenAPI document: 1.0.0
#
# https://openapi-generator.tech
#
# NOTE: Auto generated by OpenAPI Generator (https://openapi-generator.tech).

cmake_minimum_required(VERSION 3.1)

project(CppLibcurlOpenAPIClient)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CXX_STANDARD_REQUIRED ON)

if(NOT CMAKE_CXX_STANDARD)
    set(CMAKE_CXX_STANDARD 17)
endif()

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

find_package(CURL REQUIRED)
find_package(nlohmann_json REQUIRED)

include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

set(SOURCE_FILES
    src/ApiClient.cpp
    src/ApiConfiguration.cpp
    src/ApiResponse.cpp
    src/ModelBase.cpp
    src/Utility.cpp
    src/model/Category.cpp
    src/model/Order.cpp
    src/model/Pet.cpp
    src/model/Tag.cpp
    src/model/User.cpp
    src/model/r_ApiResponse.cpp
    src/api/PetApi.cpp
    src/api/StoreApi.cpp
    src/api/UserApi.cpp
)

set(HEADER_FILES
    include/CppLibcurlOpenAPIClient/ApiClient.h
    include/CppLibcurlOpenAPIClient/ApiConfiguration.h
    include/CppLibcurlOpenAPIClient/ApiResponse.h
    include/CppLibcurlOpenAPIClient/ModelBase.h
    include/CppLibcurlOpenAPIClient/Utility.h
    include/CppLibcurlOpenAPIClient/model/Category.h
    include/CppLibcurlOpenAPIClient/model/Order.h
    include/CppLibcurlOpenAPIClient/model/Pet.h
    include/CppLibcurlOpenAPIClient/model/Tag.h
    include/CppLibcurlOpenAPIClient/model/User.h
    include/CppLibcurlOpenAPIClient/model/r_ApiResponse.h
    include/CppLibcurlOpenAPIClient/api/PetApi.h
    include/CppLibcurlOpenAPIClient/api/StoreApi.h
    include/CppLibcurlOpenAPIClient/api/UserApi.h
)

add_library(${PROJECT_NAME} ${HEADER_FILES} ${SOURCE_FILES})

target_compile_options(${PROJECT_NAME}
    PRIVATE
        $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:
            -Wall -Wno-unused-variable>
)

target_include_directories(${PROJECT_NAME}
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)

target_link_libraries(${PROJECT_NAME}
    PUBLIC
		nlohmann_json::nlohmann_json
    PRIVATE
        CURL::libcurl
)

include(PostTarget.cmake OPTIONAL)

configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in
    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
    INSTALL_DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
)

install(
    TARGETS ${PROJECT_NAME}
    EXPORT ${PROJECT_NAME}Targets
    LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
    ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
    RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
    INCLUDES DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
)

install(
    DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

install(
    FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
)

install(
    EXPORT ${PROJECT_NAME}Targets
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
)
