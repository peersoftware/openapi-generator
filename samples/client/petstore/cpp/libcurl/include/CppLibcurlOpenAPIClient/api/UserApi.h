/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UserApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_UserApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_UserApi_H_


#include <memory>
#include <optional>
#include <utility>

#include "CppLibcurlOpenAPIClient/ApiClient.h"
#include "CppLibcurlOpenAPIClient/ApiResponse.h"

#include "CppLibcurlOpenAPIClient/model/User.h"
#include <string>
#include <vector>

namespace org::openapitools::client::api {

using namespace org::openapitools::client::model;

class  UserApi {
public:
    explicit UserApi(const std::shared_ptr<const ApiClient> &apiClient);

    /// <summary>
    /// Create user
    /// </summary>
    /// <remarks>
    /// This can only be done by the logged in user.
    /// </remarks>
    /// <param name="user">Created user object</param>
    ApiResponse createUser(
        const std::shared_ptr<User>& user
    ) const;
    /// <summary>
    /// Creates list of users with given input array
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="user">List of user object</param>
    ApiResponse createUsersWithArrayInput(
        const std::vector<std::shared_ptr<User>>& user
    ) const;
    /// <summary>
    /// Creates list of users with given input array
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="user">List of user object</param>
    ApiResponse createUsersWithListInput(
        const std::vector<std::shared_ptr<User>>& user
    ) const;
    /// <summary>
    /// Delete user
    /// </summary>
    /// <remarks>
    /// This can only be done by the logged in user.
    /// </remarks>
    /// <param name="username">The name that needs to be deleted</param>
    ApiResponse deleteUser(
        const std::string& username
    ) const;
    /// <summary>
    /// Get user by user name
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="username">The name that needs to be fetched. Use user1 for testing.</param>
    std::pair<ApiResponse, std::shared_ptr<User>> getUserByName(
        const std::string& username
    ) const;
    /// <summary>
    /// Logs user into the system
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="username">The user name for login</param>
    /// <param name="password">The password for login in clear text</param>
    std::pair<ApiResponse, std::string> loginUser(
        const std::string& username,
        const std::string& password
    ) const;
    /// <summary>
    /// Logs out current logged in user session
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    ApiResponse logoutUser(
    ) const;
    /// <summary>
    /// Updated user
    /// </summary>
    /// <remarks>
    /// This can only be done by the logged in user.
    /// </remarks>
    /// <param name="username">name that need to be deleted</param>
    /// <param name="user">Updated user object</param>
    ApiResponse updateUser(
        const std::string& username,
        const std::shared_ptr<User>& user
    ) const;

private:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_UserApi_H_ */

