/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PetApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_PetApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_PetApi_H_


#include <memory>
#include <optional>
#include <utility>

#include "CppLibcurlOpenAPIClient/ApiClient.h"
#include "CppLibcurlOpenAPIClient/ApiResponse.h"

#include "CppLibcurlOpenAPIClient/model/Pet.h"
#include "CppLibcurlOpenAPIClient/model/R_ApiResponse.h"
#include <string>

namespace org::openapitools::client::api {

using namespace org::openapitools::client::model;

class  PetApi {
public:
    explicit PetApi(const std::shared_ptr<const ApiClient> &apiClient);

    /// <summary>
    /// Add a new pet to the store
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="pet">Pet object that needs to be added to the store</param>
    std::pair<ApiResponse, std::shared_ptr<Pet>> addPet(
        const std::shared_ptr<Pet>& pet
    ) const;
    /// <summary>
    /// Deletes a pet
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="petId">Pet id to delete</param>
    /// <param name="apiKey"> (optional, default to &quot;&quot;)</param>
    ApiResponse deletePet(
        int64_t petId,
        std::optional<std::string> apiKey
    ) const;
    /// <summary>
    /// Finds Pets by status
    /// </summary>
    /// <remarks>
    /// Multiple status values can be provided with comma separated strings
    /// </remarks>
    /// <param name="status">Status values that need to be considered for filter</param>
    std::pair<ApiResponse, std::vector<std::shared_ptr<Pet>>> findPetsByStatus(
        const std::vector<std::string>& status
    ) const;
    /// <summary>
    /// Finds Pets by tags
    /// </summary>
    /// <remarks>
    /// Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
    /// </remarks>
    /// <param name="tags">Tags to filter by</param>
    std::pair<ApiResponse, std::vector<std::shared_ptr<Pet>>> findPetsByTags(
        const std::vector<std::string>& tags
    ) const;
    /// <summary>
    /// Find pet by ID
    /// </summary>
    /// <remarks>
    /// Returns a single pet
    /// </remarks>
    /// <param name="petId">ID of pet to return</param>
    std::pair<ApiResponse, std::shared_ptr<Pet>> getPetById(
        int64_t petId
    ) const;
    /// <summary>
    /// Update an existing pet
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="pet">Pet object that needs to be added to the store</param>
    std::pair<ApiResponse, std::shared_ptr<Pet>> updatePet(
        const std::shared_ptr<Pet>& pet
    ) const;
    /// <summary>
    /// Updates a pet in the store with form data
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="petId">ID of pet that needs to be updated</param>
    /// <param name="name">Updated name of the pet (optional, default to &quot;&quot;)</param>
    /// <param name="status">Updated status of the pet (optional, default to &quot;&quot;)</param>
    ApiResponse updatePetWithForm(
        int64_t petId,
        std::optional<std::string> name,
        std::optional<std::string> status
    ) const;
    /// <summary>
    /// uploads an image
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="petId">ID of pet to update</param>
    /// <param name="additionalMetadata">Additional data to pass to server (optional, default to &quot;&quot;)</param>
    /// <param name="file">file to upload (optional, default to &quot;&quot;)</param>
    std::pair<ApiResponse, std::shared_ptr<r_ApiResponse>> uploadFile(
        int64_t petId,
        std::optional<std::string> additionalMetadata,
        std::optional<std::string> file
    ) const;

private:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_PetApi_H_ */

