{{>licenseInfo}}
#include "{{packageName}}/ModelBase.h"

{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}

bool ModelBase::isSet() const {
    return m_IsSet;
}
nlohmann::json ModelBase::toJson(bool value) {
    return value;
}
nlohmann::json ModelBase::toJson(float value) {
    return value;
}
nlohmann::json ModelBase::toJson(double value) {
    return value;
}
nlohmann::json ModelBase::toJson(int32_t value) {
    return value;
}
nlohmann::json ModelBase::toJson(uint32_t value) {
    return value;
}
nlohmann::json ModelBase::toJson(int64_t value) {
    return value;
}
nlohmann::json ModelBase::toJson(uint64_t value) {
    return value;
}
nlohmann::json ModelBase::toJson(const std::string& value) {
    return value;
}
nlohmann::json ModelBase::toJson(const nlohmann::json& value) {
    return value;
}

bool ModelBase::fromJson(const nlohmann::json& val, bool & outVal) {
    outVal = !val.is_boolean() ? false : val.get<bool>();
    return val.is_boolean();
}
bool ModelBase::fromJson(const nlohmann::json& val, float & outVal) {
    outVal = (!val.is_number_float() && !val.is_number_integer()) ? std::numeric_limits<float>::quiet_NaN(): val.get<float>();
    return val.is_number_float() || val.is_number_integer();
}
bool ModelBase::fromJson(const nlohmann::json& val, double & outVal) {
    outVal = (!val.is_number_float() && !val.is_number_integer()) ? std::numeric_limits<double>::quiet_NaN(): val.get<double>();
    return val.is_number_float() || val.is_number_integer();
}
bool ModelBase::fromJson(const nlohmann::json& val, int32_t & outVal) {
    outVal = !val.is_number_integer() ? std::numeric_limits<int32_t>::quiet_NaN() : val.get<int32_t>();
    return val.is_number_integer();
}
bool ModelBase::fromJson(const nlohmann::json& val, uint32_t & outVal) {
    outVal = !val.is_number_integer() ? std::numeric_limits<uint32_t>::quiet_NaN() : val.get<uint32_t>();
    return val.is_number_integer();
}
bool ModelBase::fromJson(const nlohmann::json& val, int64_t & outVal) {
    outVal = !val.is_number() ? std::numeric_limits<int64_t>::quiet_NaN() : val.get<int64_t>();
    return val.is_number();
}
bool ModelBase::fromJson(const nlohmann::json& val, uint64_t & outVal) {
    outVal = !val.is_number() ? std::numeric_limits<uint64_t>::quiet_NaN() : val.get<uint64_t>();
    return val.is_number();
}
bool ModelBase::fromJson(const nlohmann::json& val, std::string & outVal) {
    outVal = val.is_string() ? val.get<std::string>() : "";
    return val.is_string();
}
bool ModelBase::fromJson(const nlohmann::json& val, nlohmann::json & outVal) {
    outVal = val;
    return !val.is_null();
}

{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}
