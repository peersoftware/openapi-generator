{{>licenseInfo}}
{{#models}}{{#model}}/*
 * {{classname}}.h
 *
 * {{description}}
 */

#ifndef {{modelHeaderGuardPrefix}}_{{classname}}_H_
#define {{modelHeaderGuardPrefix}}_{{classname}}_H_

{{^parent}}
{{{defaultInclude}}}
{{#isEnum}}
{{^isNumeric}}
#include <string>
{{/isNumeric}}
{{/isEnum}}
#include <nlohmann/json.hpp>

#include "{{packageName}}/ModelBase.h"
{{/parent}}

{{#imports}}{{{this}}}
{{/imports}}

{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}

{{#vendorExtensions.x-has-forward-declarations}}
{{#vendorExtensions.x-forward-declarations}}{{.}}
{{/vendorExtensions.x-forward-declarations}}
{{/vendorExtensions.x-has-forward-declarations}}
{{#isEnum}}
class {{declspec}} {{classname}}
    : public {{{parent}}}{{^parent}}ModelBase{{/parent}} {
public:
    /////////////////////////////////////////////
    /// ModelBase overrides
    nlohmann::json toJson() const override;
    bool fromJson(const nlohmann::json& json) override;

    enum class e{{classname}} {
        {{#allowableValues}}
        {{#enumVars}}
        {{#enumDescription}}
        /// <summary>
        /// {{{.}}}
        /// </summary>
        {{/enumDescription}}
        {{classname}}_{{{name}}}{{^last}},{{/last}}
        {{/enumVars}}
        {{/allowableValues}}
    };

    e{{classname}} getValue() const;
    {{^isNumeric}}std::string getValueString() const;{{/isNumeric}}
    void setValue(e{{classname}} const value);

private:
    e{{classname}} m_value;
};
{{/isEnum}}
{{^isEnum}}

/// <summary>
/// {{{description}}}
/// </summary>
class {{declspec}} {{classname}}
    : public {{{parent}}}{{^parent}}ModelBase{{/parent}} {
public:
    /////////////////////////////////////////////
    /// ModelBase overrides
    nlohmann::json toJson() const override;
    bool fromJson(const nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// {{classname}} members

    {{#vars}}
    {{^isInherited}}
    /// <summary>
    /// {{{description}}}
    /// </summary>
    {{#vendorExtensions.x-cpp-is-class}}
    const {{{dataType}}}& {{getter}}() const;
    {{/vendorExtensions.x-cpp-is-class}}
    {{^vendorExtensions.x-cpp-is-class}}
    {{{dataType}}} {{getter}}() const;
    {{/vendorExtensions.x-cpp-is-class}}
    bool {{nameInCamelCase}}IsSet() const;
    void unset{{name}}();

    {{#vendorExtensions.x-cpp-is-class}}
    {{#vendorExtensions.x-cpp-is-std-string}}
    void {{setter}}(std::string_view value);
    {{/vendorExtensions.x-cpp-is-std-string}}
    {{^vendorExtensions.x-cpp-is-std-string}}
    void {{setter}}(const {{{dataType}}}& value);
    {{/vendorExtensions.x-cpp-is-std-string}}
    {{/vendorExtensions.x-cpp-is-class}}
    {{^vendorExtensions.x-cpp-is-class}}
    void {{setter}}({{{dataType}}} value);
    {{/vendorExtensions.x-cpp-is-class}}

    {{/isInherited}}
    {{/vars}}

private:
    {{#vars}}
    {{^isInherited}}
    {{#vendorExtensions.x-cpp-is-class}}
    {{#vendorExtensions.x-cpp-is-std-string}}
    {{{dataType}}} m_{{name}}{ {{{defaultValue}}} };
    {{/vendorExtensions.x-cpp-is-std-string}}
    {{^vendorExtensions.x-cpp-is-std-string}}
    {{{dataType}}} m_{{name}};
    {{/vendorExtensions.x-cpp-is-std-string}}
    {{/vendorExtensions.x-cpp-is-class}}
    {{^vendorExtensions.x-cpp-is-class}}
    {{{dataType}}} m_{{name}}{ {{{defaultValue}}} };
    {{/vendorExtensions.x-cpp-is-class}}
    bool m_{{name}}IsSet{false};
    {{/isInherited}}
    {{/vars}}
};

{{/isEnum}}

{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}

#endif /* {{modelHeaderGuardPrefix}}_{{classname}}_H_ */
{{/model}}
{{/models}}
