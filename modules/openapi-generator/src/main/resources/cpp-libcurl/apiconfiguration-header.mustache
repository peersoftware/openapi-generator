{{>licenseInfo}}
/*
 * ApiConfiguration.h
 *
 * Configuration for API Client.
 */

#ifndef {{apiHeaderGuardPrefix}}_ApiConfiguration_H_
#define {{apiHeaderGuardPrefix}}_ApiConfiguration_H_

{{{defaultInclude}}}

#include <functional>
#include <map>
#include <string>
#include <string_view>

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

enum class SslVersion {
    TLSv1_0,
    TLSv1_1,
    TLSv1_2,
    TLSv1_3
};

class {{declspec}} ApiConfiguration {
public:
    const std::string &getBaseUrl() const;
    void setBaseUrl(std::string_view value);

    const std::string &getClientCert() const;
    void setClientCert(std::string_view value);

    const std::string &getClientKey() const;
    void setClientKey(std::string_view value);

    const std::string &getCACert() const;
    void setCACert(std::string_view value);

    bool getSkipTlsVerify() const;
    void setSkipTlsVerify(bool value);

    SslVersion getMinimumTls() const;
    void setMinimumTls(SslVersion value);

    {{#hasAuthMethods}}
    {{#authMethods}}
    {{#isBasic}}
    const std::string &getUsername() const;
    void setUsername(std::string_view value);

    const std::string &getPassword() const;
    void setPassword(std::string_view value);
    {{/isBasic}}
    {{#isOAuth}}
    const std::string &getAccessToken() const;
    void setAccessToken(std::string_view value);
    {{/isOAuth}}
    {{#isApiKey}}
    const std::map<std::string, std::string, std::less<>> &getApiKeys() const;
    void setApiKeys(const std::map<std::string, std::string, std::less<>> &value);
    {{/isApiKey}}
    {{/authMethods}}
    {{/hasAuthMethods}}

private:
    std::string m_BaseUrl;
    std::string m_ClientCertFile; /* client certificate */
    std::string m_ClientKeyFile;  /* client private key */
    std::string m_CACertFile;     /* CA certificate */
    bool m_SkipTlsVerify{false};  /* false -- verify server certificate */
                                  /* true -- skip ssl verify for server certificate */
    SslVersion m_minTls{SslVersion::TLSv1_2};

    {{#hasAuthMethods}}
    {{#authMethods}}
    {{#isBasic}}
    std::string m_Username;
    std::string m_Password;
    {{/isBasic}}
    {{#isOAuth}}
    std::string m_AccessToken;
    {{/isOAuth}}
    {{#isApiKey}}
    std::map<std::string, std::string, std::less<>> m_ApiKeys;
    {{/isApiKey}}
    {{/authMethods}}
    {{/hasAuthMethods}}
};

{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}
#endif /* {{apiHeaderGuardPrefix}}_ApiConfiguration_H_ */
