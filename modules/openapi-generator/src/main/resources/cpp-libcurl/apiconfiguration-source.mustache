{{>licenseInfo}}
#include "{{packageName}}/ApiConfiguration.h"

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

const std::string &ApiConfiguration::getBaseUrl() const { return m_BaseUrl; }

void ApiConfiguration::setBaseUrl(const std::string &value) {
    m_BaseUrl = value;
}

const std::string &ApiConfiguration::getClientCert() const { return m_ClientCertFile; }

void ApiConfiguration::setClientCert(const std::string &value) {
    m_ClientCertFile = value;
}

const std::string &ApiConfiguration::getClientKey() const { return m_ClientKeyFile; }

void ApiConfiguration::setClientKey(const std::string &value) {
    m_ClientKeyFile = value;
}

const std::string &ApiConfiguration::getCACert() const { return m_CACertFile; }

void ApiConfiguration::setCACert(const std::string &value) {
    m_CACertFile = value;
}

bool ApiConfiguration::getSkipTlsVerify() const { return m_SkipTlsVerify; }

void ApiConfiguration::setSkipTlsVerify(bool value) { m_SkipTlsVerify = value; }
{{#hasAuthMethods}}
{{#authMethods}}
{{#isBasic}}

const std::string &ApiConfiguration::getUsername() const { return m_Username; }

void ApiConfiguration::setUsername(const std::string &value) {
    m_Username = value;
}

const std::string &ApiConfiguration::getPassword() const { return m_Password; }

void ApiConfiguration::setPassword(const std::string &value) {
    m_Password = value;
}
{{/isBasic}}
{{#isOAuth}}

const std::string &ApiConfiguration::getAccessToken() const { return m_AccessToken; }

void ApiConfiguration::setAccessToken(const std::string &value) {
    m_AccessToken = value;
}
{{/isOAuth}}
{{#isApiKey}}

const std::map<std::string, std::string> &ApiConfiguration::getApiKeys() const { return m_ApiKeys; }

void ApiConfiguration::setApiKeys(const std::map<std::string, std::string> &value) {
    m_ApiKeys = value;
}
{{/isApiKey}}
{{/authMethods}}
{{/hasAuthMethods}}


{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}
