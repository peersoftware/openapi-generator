{{>licenseInfo}}
#include "{{packageName}}/ApiConfiguration.h"

#include <functional>
#include <string>
#include <string_view>

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

const std::string &ApiConfiguration::getBaseUrl() const { return m_BaseUrl; }

void ApiConfiguration::setBaseUrl(std::string_view value) {
    m_BaseUrl = value;
}

const std::string &ApiConfiguration::getClientCert() const { return m_ClientCertFile; }

void ApiConfiguration::setClientCert(std::string_view value) {
    m_ClientCertFile = value;
}

const std::string &ApiConfiguration::getClientKey() const { return m_ClientKeyFile; }

void ApiConfiguration::setClientKey(std::string_view value) {
    m_ClientKeyFile = value;
}

const std::string &ApiConfiguration::getCACert() const { return m_CACertFile; }

void ApiConfiguration::setCACert(std::string_view value) {
    m_CACertFile = value;
}

bool ApiConfiguration::getSkipTlsVerify() const { return m_SkipTlsVerify; }

void ApiConfiguration::setSkipTlsVerify(bool value) { m_SkipTlsVerify = value; }

SslVersion ApiConfiguration::getMinimumTls() const { return m_minTls; }

void ApiConfiguration::setMinimumTls(SslVersion value) { m_minTls = value; }
{{#hasAuthMethods}}
{{#authMethods}}
{{#isBasicBasic}}

const std::string &ApiConfiguration::getUsername() const { return m_Username; }

void ApiConfiguration::setUsername(std::string_view value) {
    m_Username = value;
}

const std::string &ApiConfiguration::getPassword() const { return m_Password; }

void ApiConfiguration::setPassword(std::string_view value) {
    m_Password = value;
}
{{/isBasicBasic}}
{{#isOAuth}}

const std::string &ApiConfiguration::getAccessToken() const { return m_AccessToken; }

void ApiConfiguration::setAccessToken(std::string_view value) {
    m_AccessToken = value;
}
{{/isOAuth}}
{{#isApiKey}}

const std::map<std::string, std::string, std::less<>> &ApiConfiguration::getApiKeys() const {
    return m_ApiKeys;
}

void ApiConfiguration::setApiKeys(const std::map<std::string, std::string, std::less<>> &value) {
    m_ApiKeys = value;
}
{{/isApiKey}}
{{/authMethods}}
{{/hasAuthMethods}}


{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}
